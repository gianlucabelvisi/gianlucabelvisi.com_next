{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///Users/gianlucabelvisi/Workspace/blog/new_blog/src/lib/posts.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport type { BlogPost, BlogPostFrontmatter } from '@/types/blog'\n\nconst postsDirectory = path.join(process.cwd(), 'content')\n\nfunction formatDate(dateString: string): string {\n  const date = new Date(dateString)\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\n\nexport function getPostBySlug(slug: string): BlogPost | null {\n  try {\n    const fullPath = path.join(postsDirectory, `${slug}.mdx`)\n    \n    if (!fs.existsSync(fullPath)) {\n      return null\n    }\n    \n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const { data, content } = matter(fileContents)\n    \n    // Validate frontmatter and ensure date is a string\n    const frontmatter = {\n      ...data,\n      date: typeof data.date === 'string' ? data.date : data.date?.toISOString?.() || data.date\n    } as BlogPostFrontmatter\n    \n    return {\n      slug,\n      frontmatter: {\n        ...frontmatter,\n        formattedDate: formatDate(frontmatter.date)\n      },\n      content,\n      excerpt: generateExcerpt(content)\n    }\n  } catch (error) {\n    console.error(`Error reading post ${slug}:`, error)\n    return null\n  }\n}\n\nexport function getAllPosts(): BlogPost[] {\n  try {\n    if (!fs.existsSync(postsDirectory)) {\n      return []\n    }\n    \n    const fileNames = fs.readdirSync(postsDirectory)\n    const posts = fileNames\n      .filter(name => name.endsWith('.mdx'))\n      .map(name => {\n        const slug = name.replace(/\\.mdx$/, '')\n        return getPostBySlug(slug)\n      })\n      .filter((post): post is BlogPost => post !== null)\n      .filter(post => !post.frontmatter.hidden)\n      .sort((a, b) => {\n        // Sort by date, newest first\n        const dateA = new Date(a.frontmatter.date).getTime()\n        const dateB = new Date(b.frontmatter.date).getTime()\n        return dateB - dateA\n      })\n    \n    return posts\n  } catch (error) {\n    console.error('Error reading posts:', error)\n    return []\n  }\n}\n\nexport function getFeaturedPost(): BlogPost | null {\n  const posts = getAllPosts()\n  return posts.length > 0 ? posts[0]! : null\n}\n\nfunction generateExcerpt(content: string, maxLength: number = 160): string {\n  // Remove MDX/markdown syntax for a clean excerpt\n  const cleanContent = content\n    .replace(/^---[\\s\\S]*?---/, '') // Remove frontmatter\n    .replace(/import\\s+.*?from\\s+.*?;/g, '') // Remove imports\n    .replace(/^#+\\s+/gm, '') // Remove headers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Remove links, keep text\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '') // Remove images\n    .replace(/\\n+/g, ' ') // Replace newlines with spaces\n    .trim()\n  \n  if (cleanContent.length <= maxLength) {\n    return cleanContent\n  }\n  \n  return cleanContent.substring(0, maxLength).replace(/\\s+\\w*$/, '') + '...'\n}\n\nexport function getPostsByTag(tag: string): BlogPost[] {\n  const posts = getAllPosts()\n  return posts.filter(post => \n    post.frontmatter.hashtags?.toLowerCase().includes(tag.toLowerCase())\n  )\n}\n\nexport function getAllTags(): string[] {\n  const posts = getAllPosts()\n  const tagSet = new Set<string>()\n  \n  posts.forEach(post => {\n    if (post.frontmatter.hashtags) {\n      const tags = post.frontmatter.hashtags.split(',').map(tag => tag.trim())\n      tags.forEach(tag => tagSet.add(tag))\n    }\n  })\n  \n  return Array.from(tagSet).sort()\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/gianlucabelvisi/Workspace/blog/new_blog/src/app/blog/%5Bslug%5D/page.tsx"],"sourcesContent":["import { notFound } from 'next/navigation'\nimport { Metadata } from 'next'\nimport { getPostBySlug } from '@/lib/posts'\n\ninterface BlogPostPageProps {\n  params: Promise<{ slug: string }>\n}\n\nasync function getPost(slug: string) {\n  return getPostBySlug(slug)\n}\n\nexport async function generateStaticParams() {\n  // For now, we'll just return the diabetes post\n  // Later we can scan the content directory for all posts\n  return [\n    { slug: 'diabetes' }\n  ]\n}\n\nexport async function generateMetadata({ params }: BlogPostPageProps): Promise<Metadata> {\n  const { slug } = await params\n  const post = await getPost(slug)\n  \n  if (!post) {\n    return {\n      title: 'Post Not Found',\n      description: 'The requested blog post could not be found.'\n    }\n  }\n\n  return {\n    title: post.frontmatter.title,\n    description: post.frontmatter.subTitle,\n    authors: [{ name: post.frontmatter.author }],\n    openGraph: {\n      title: post.frontmatter.title,\n      description: post.frontmatter.subTitle,\n      type: 'article',\n      publishedTime: post.frontmatter.date,\n      authors: [post.frontmatter.author],\n      images: post.frontmatter.featureImage ? [\n        {\n          url: `/images/${slug}/${post.frontmatter.featureImage}`,\n          width: 1200,\n          height: 630,\n          alt: post.frontmatter.title,\n        }\n      ] : undefined,\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: post.frontmatter.title,\n      description: post.frontmatter.subTitle,\n      images: post.frontmatter.featureImage ? [`/images/${slug}/${post.frontmatter.featureImage}`] : undefined,\n    },\n  }\n}\n\nexport default async function BlogPostPage({ params }: BlogPostPageProps) {\n  const { slug } = await params\n  const post = await getPost(slug)\n\n  if (!post) {\n    notFound()\n  }\n\n  return (\n    <article style={{ maxWidth: '800px', margin: '0 auto', padding: '2rem' }}>\n      <header style={{ marginBottom: '3rem', textAlign: 'center' }}>\n        <time style={{ \n          fontSize: '0.9rem', \n          color: '#666', \n          textTransform: 'uppercase', \n          letterSpacing: '0.1em' \n        }}>\n          {post.frontmatter.formattedDate || post.frontmatter.date}\n        </time>\n        \n        <h1 style={{ \n          fontSize: '2.5rem', \n          marginTop: '1rem', \n          marginBottom: '1rem', \n          lineHeight: '1.2' \n        }}>\n          {post.frontmatter.title}\n        </h1>\n        \n        <p style={{ \n          fontSize: '1.2rem', \n          color: '#666', \n          fontStyle: 'italic' \n        }}>\n          {post.frontmatter.subTitle}\n        </p>\n        \n        <p style={{ \n          fontSize: '0.9rem', \n          color: '#999', \n          marginTop: '1rem' \n        }}>\n          By {post.frontmatter.author}\n        </p>\n      </header>\n\n      <div style={{ lineHeight: '1.7', fontSize: '1.1rem' }}>\n        {/* Placeholder for MDX content */}\n        <div style={{ \n          padding: '2rem', \n          backgroundColor: '#f9f9f9', \n          borderRadius: '8px', \n          border: '1px solid #eee',\n          textAlign: 'center'\n        }}>\n          <h2>Content Coming Soon!</h2>\n          <p>This is where the full MDX content will be rendered.</p>\n          <p>We'll implement the MDX processing and custom components in the next phases.</p>\n          <p style={{ marginTop: '2rem', fontSize: '0.9rem', color: '#666' }}>\n            <strong>Post slug:</strong> {slug}\n          </p>\n        </div>\n      </div>\n\n      <footer style={{ \n        marginTop: '4rem', \n        paddingTop: '2rem', \n        borderTop: '1px solid #eee',\n        textAlign: 'center'\n      }}>\n        <p style={{ color: '#666' }}>\n          <a href=\"/\" style={{ textDecoration: 'none' }}>\n            ← Back to Home\n          </a>\n        </p>\n      </footer>\n    </article>\n  )\n} "],"names":[],"mappings":"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","debugId":null}}]
}